// === ENUMS ===

// Represents logical Boolean operators
enum BOOLEAN_OPERATOR
    AND     // Logical AND
    OR      // Logical OR
    NOT     // Logical NOT (unary)
	IS     // default 
is_BOOLEAN_OPERATOR_binary(BOOLEAN_OPERATOR op) =>
	bool result = false 
	if op == BOOLEAN_OPERATOR.AND
		result := true
	else if op == BOOLEAN_OPERATOR.OR
		result := true
	result


// === TYPES ===

// Struct for representing a Boolean expression node (base level or composite)
// - If `is_base_level_expression` is true, the node is a leaf with a fixed boolean value
// - Otherwise, it's a composite expression with an operator and children
type BooleanExpression
    string name = na // the name of the expression / condition 
    bool is_base_level_expression = false          // True if this node is a leaf
    bool base_level_expression = false             // Value for base-level expressions
    BooleanExpression left_expression = na         // Left child (required)
    BooleanExpression right_expression = na        // Right child (optional for NOT)
    BOOLEAN_OPERATOR operator = na                 // Operator applied to children
    bool evaluated_value = false                   // Cached evaluation result



// Creates a BooleanExpression struct with all required values
create_BooleanExpression(string name, bool is_base_level, bool base_level_val, BOOLEAN_OPERATOR operator, BooleanExpression left_val, BooleanExpression right_val) =>
    BooleanExpression expr = BooleanExpression.new(name, is_base_level, base_level_val, left_val, right_val, operator, false)
    expr

// Frame used to simulate recursive evaluation using an explicit stack
// Tracks whether children have been evaluated yet
type EvaluationFrame
    BooleanExpression node = na
    bool left_result = false
    bool right_result = false
    bool evaluated_left = false
    bool evaluated_right = false

// === MAIN EVALUATION FUNCTION ===

// Evaluates a BooleanExpression tree using a manual stack (non-recursive)
// Handles nested AND/OR/NOT logic in order, from bottom-up
// Caches result in node.evaluated_value and returns final result
evaluate_BooleanExpression(BooleanExpression expression) =>
    array<EvaluationFrame> stack = array.new<EvaluationFrame>()
    EvaluationFrame root = EvaluationFrame.new(expression, false, false, false, false)
    array.push(stack, root)
    bool final_result = false

    while array.size(stack) > 0
        EvaluationFrame frame = stack.pop()

        // Case 1: Base-level expression (leaf node)
        if frame.node.is_base_level_expression
            frame.node.evaluated_value := frame.node.base_level_expression

        // Case 2: Evaluate left side first
        else if not frame.evaluated_left
            EvaluationFrame left = EvaluationFrame.new(frame.node.left_expression, false, false, false, false)
            frame.evaluated_left := true
            array.push(stack, frame)
            array.push(stack, left)

        // Case 3: Evaluate right side (for binary ops only)
        else if is_BOOLEAN_OPERATOR_binary(frame.node.operator) and not frame.evaluated_right
            EvaluationFrame right = EvaluationFrame.new(frame.node.right_expression, false, false, false, false)
            frame.evaluated_right := true
            array.push(stack, frame)
            array.push(stack, right)

        // Case 4: Both children evaluated â€” now compute result
        else
            bool expression_result = false
            bool left_value = false
            bool right_value = false
            if frame.evaluated_left
                left_value := frame.node.left_expression.evaluated_value
            if frame.evaluated_right
                right_value := frame.node.right_expression.evaluated_value

            if frame.node.operator == BOOLEAN_OPERATOR.NOT
                expression_result := not left_value
			else if frame.node.operator == BOOLEAN_OPERATOR.IS
				expression_result := left_value
            else if frame.node.operator == BOOLEAN_OPERATOR.AND
                expression_result := left_value and right_value
            else if frame.node.operator == BOOLEAN_OPERATOR.OR
                expression_result := left_value or right_value

            frame.node.evaluated_value := expression_result

    final_result



