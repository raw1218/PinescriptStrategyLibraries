/////////////// Chart Drawing Library //////////////////////////////////////////////////////////
//Supports grouping different sets of boxes / drawings into named groups
//Each group has one active (dynamic) drawing that updates every candle, and a set of finished (static) drawings that are drawn once. 
//Start_new_box(group_name, coordinates)
//Update_box(group_name, coordinates)
//Finish_box(group_name, coordinates)

type ChartDrawingHorizontalLine
	bool solid_line = true 
	color line_color = na 
	float price = 0 
	int left_x = 0
	int right_x = 0
	line tv_line_item = na

type ChartDrawingBox
	float top_price = na 
	float bottom_price = na 
	int left_bar_index = na 
	int right_bar_index = na
	color box_color = na 
	color border_color = na
	box tv_box_item = na
	array<ChartDrawingHorizontalLine> horizontal_lines = na

type ChartDrawingLabel
	int bar_index_x = na 
	float price_y = na 
	color label_color = na
	string label_text = na
	label tv_label_item = na 
	

type ChartDrawingItem
	string name = na
	ChartDrawingBox chart_box = na
	ChartDrawingLabel chart_label = na


type ChartDrawingGroup
	string name = na
	array<ChartDrawingItem> current_drawings = na
	array<ChartDrawingItem> finished_drawings = na 

	int max_boxes_in_group = 50 //no more than 50 boxes drawn from this group
	int max_box_width = 200  //if we try to draw a box thats that big


type ChartDrawingArgs
	array<ChartDrawingGroup> groups = na
ChartDrawingLibrary_createChartDrawingArgs() =>
	ChartDrawingArgs args = ChartDrawingArgs.new() 
	args.groups := array.new<ChartDrawingGroup>()
	args

helper_getChartDrawingGroupByName(ChartDrawingArgs args, string group_name) =>
	ChartDrawingGroup result = na 
	if args.groups.size() > 0
		for i = args.groups.size() - 1 to 0
			ChartDrawingGroup current_group = args.groups.get(i)
			if group_name == current_group.name
				result := current_group 
				break
	result 

helper_getCurrentChartDrawingItemByName(ChartDrawingArgs args, ChartDrawingGroup group, string item_name) =>
	ChartDrawingItem result = na 
	if group.current_drawings.size() > 0 
		for i = group.current_drawings.size() - 1 to 0 
			ChartDrawingItem current_item = group.current_drawings.get(i)
			if current_item.name == item_name 
				result := current_item 
				break 
	result 
 
helper_createAndAdd_ChartDrawingGroup(ChartDrawingArgs args, string group_name) =>
	ChartDrawingGroup group = ChartDrawingGroup.new()
	group.name := group_name 
	group.finished_drawings := array.new<ChartDrawingItem>() 
	group.current_drawings := array.new<ChartDrawingItem>()
	args.groups.push(group)
	group 

helper_createAndAdd_ChartDrawingItem(ChartDrawingArgs args, ChartDrawingGroup group, string item_name) =>
	ChartDrawingItem item = ChartDrawingItem.new() 
	item.name := item_name 
	group.current_drawings.push(item)
	item 
	
helper_removeCurrentChartDrawingItemByName(ChartDrawingArgs args, ChartDrawingGroup group, string item_name) =>
	if group.current_drawings.size() > 0
		for i = group.current_drawings.size() - 1 to 0 
			if group.current_drawings.get(i).name == item_name 
				group.current_drawings.remove(i)
				break //assumes no duplicates


helper_ChartDrawingLibrary_undrawBox(ChartDrawingArgs args, ChartDrawingBox chart_box) =>
	//delete the box
	if not na(chart_box.tv_box_item)
		chart_box.tv_box_item.delete()
		chart_box.tv_box_item := na 
	//delete the horizontal lines 
	if not na(chart_box.horizontal_lines)
		if chart_box.horizontal_lines.size() > 0 
			for i = chart_box.horizontal_lines.size() - 1 to 0 
				ChartDrawingHorizontalLine current_line = chart_box.horizontal_lines.get(i)
				if not na(current_line.tv_line_item)
					current_line.tv_line_item.delete()
					current_line.tv_line_item := na 

				

helper_undrawChartDrawingItem(ChartDrawingArgs args, ChartDrawingItem item) =>
	//delete chart box if it exists
	if not na(item.chart_box)
		helper_ChartDrawingLibrary_undrawBox(args, item.chart_box)

	//check for labels 
	if not na(item.chart_label)
		if not na(item.chart_label.tv_label_item)
			item.chart_label.tv_label_item.delete()
			item.chart_label.tv_label_item := na 

helper_ChartDrawingLibrary_drawChartHorizontalLine(ChartDrawingArgs args, ChartDrawingHorizontalLine chart_line) =>
	if na(chart_line.tv_line_item)
		chart_line.tv_line_item := line.new(x1 = chart_line.left_x, x2 = chart_line.right_x, y1 = chart_line.price, y2 = chart_line.price, color = chart_line.line_color, style = line.style_solid, width = 2)
helper_ChartDrawingLibrary_drawChartBox(ChartDrawingArgs args, ChartDrawingBox chart_box) =>
	if na(chart_box.tv_box_item)
		chart_box.tv_box_item := box.new(left = chart_box.left_bar_index,right = chart_box.right_bar_index,top = chart_box.top_price, bottom = chart_box.bottom_price, bgcolor = chart_box.box_color, border_color = chart_box.border_color)
	//draw lines 
	if chart_box.horizontal_lines.size() > 0 
		for i = chart_box.horizontal_lines.size() - 1 to 0 
			ChartDrawingHorizontalLine current_line = chart_box.horizontal_lines.get(i)
			helper_ChartDrawingLibrary_drawChartHorizontalLine(args, current_line)



helper_drawChartDrawingItem(ChartDrawingArgs args, ChartDrawingItem item) =>
	//chart box 
	if not na(item.chart_box)
		ChartDrawingBox chart_box = item.chart_box
		helper_ChartDrawingLibrary_drawChartBox(args, chart_box)

	if not na(item.chart_label)
		ChartDrawingLabel chart_label = item.chart_label
		if na(chart_label.tv_label_item)
			chart_label.tv_label_item := label.new(x = chart_label.bar_index_x, y = chart_label.price_y, text = chart_label.label_text)	


ChartDrawingLibrary_UpdateDrawing(ChartDrawingArgs args, string group_name, string item_name, ChartDrawingBox chart_box = na, ChartDrawingLabel chart_label = na) => 
	ChartDrawingGroup group = helper_getChartDrawingGroupByName(args, group_name)
	// add the group if it doesn't already exist
	if na(group)
		group := helper_createAndAdd_ChartDrawingGroup(args, group_name)

	//add the item if it doesn't already exist
	ChartDrawingItem item = helper_getCurrentChartDrawingItemByName(args, group, item_name)
	if na(item)
		item := helper_createAndAdd_ChartDrawingItem(args, group, item_name)
		
	//undraw the previous drawing before we draw the new one 
	helper_undrawChartDrawingItem(args, item)

	//update the new parts of the drawing 
	item.chart_box := chart_box 
	item.chart_label := chart_label

	//draw the new box
	helper_drawChartDrawingItem(args, item)

	
helper_ChartDrawingLibrary_addFinishedDrawing(ChartDrawingArgs args, ChartDrawingItem item, ChartDrawingGroup group) =>
	group.finished_drawings.push(item)
	//check if above max 
	if group.finished_drawings.size() > group.max_boxes_in_group
		group.finished_drawings.remove(0)//remove first item

//returns 0 on success, 1 on error
ChartDrawingLibrary_FinishDrawing(ChartDrawingArgs args, string group_name, string item_name) => 
	int return_code = 0
	ChartDrawingGroup group = helper_getChartDrawingGroupByName(args, group_name)
	ChartDrawingItem item = na
	// find if item exists 
	if not na(group)
		item := helper_getCurrentChartDrawingItemByName(args, group, item_name)
	if not na(item)
		//assumes the box is already drawn 
		helper_removeCurrentChartDrawingItemByName(args, group, item.name)
		helper_ChartDrawingLibrary_addFinishedDrawing(args = args, item = item, group = group)
		return_code := 0
	else
		//we should not reach here this is an error
		return_code := 1
	return_code 



ChartDrawingLibrary_CancelDrawing(ChartDrawingArgs args, string group_name, string item_name) => 
	int return_code = 0
	ChartDrawingGroup group = helper_getChartDrawingGroupByName(args, group_name)
	ChartDrawingItem item = na
	// find if item exists 
	if not na(group)
		item := helper_getCurrentChartDrawingItemByName(args, group, item_name)
	if not na(item)
		//delete the drawing 
		item.chart_box.tv_box_item.delete()
		helper_removeCurrentChartDrawingItemByName(args, group, item.name)
		return_code := 0
	else
		//we should not reach here this is an error
		return_code := 1
	return_code 


ChartDrawingLibrary_createChartDrawingBox(ChartDrawingArgs args, float top_price, float bottom_price, int left_bar_index, int right_bar_index, color bg_color, color border_color) =>
	ChartDrawingBox my_box = ChartDrawingBox.new()
	my_box.top_price := top_price 
	my_box.bottom_price := bottom_price 
	my_box.left_bar_index := left_bar_index 
	my_box.right_bar_index := right_bar_index
	my_box.box_color := bg_color 
	my_box.border_color := border_color
	my_box.horizontal_lines := array.new<ChartDrawingHorizontalLine>()

	my_box //return the box 

ChartDrawingLibrary_addHorizontalLineToChartDrawingBox(ChartDrawingArgs args, ChartDrawingBox chart_box, float line_price, bool solid_line) =>
	ChartDrawingHorizontalLine my_line = ChartDrawingHorizontalLine.new()
	my_line.left_x := chart_box.left_bar_index
	my_line.right_x := chart_box.right_bar_index
	my_line.price := line_price 
	my_line.solid_line := solid_line 
	chart_box.horizontal_lines.push(my_line)

ChartDrawingLibrary_createChartDrawingLabel(ChartDrawingArgs args, string label_text, int bar_index_x, float price_y, color label_color = na) =>
	ChartDrawingLabel my_label = ChartDrawingLabel.new()
	my_label.bar_index_x := bar_index_x 
	my_label.price_y := price_y 
	my_label.label_color := label_color 
	my_label.label_text := label_text 
	my_label 



	