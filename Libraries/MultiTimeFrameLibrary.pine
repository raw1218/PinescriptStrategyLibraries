

type TimeFrameCandleDebugInfo
    bool should_draw_candle = false
    bool candle_should_have_label = false
    int first_bar_index = 0
    int last_bar_index = 0
    string label_text = ""
    bool is_candle_in_higher_tf_FVG = false
helper_MultiTimeFrameLibrary_copyTimeFrameCandleDebugInfo(TimeFrameCandleDebugInfo source, TimeFrameCandleDebugInfo destination) =>
    destination.first_bar_index := source.first_bar_index
    destination.last_bar_index := source.last_bar_index

type TimeFrameCandle
    float high_price = 0 
    float low_price = 0
    float open_price = 0 
    float close_price = 0 
    int timeframe = 0 //in minutes
    int bar_index_in_own_timeframe = 0
    bool is_finished = false 
    TimeFrameCandleDebugInfo debug_info = na

MultiTimeFrameLibrary_copyTimeFrameCandle(TimeFrameCandle source, TimeFrameCandle destination) =>
    destination.high_price := source.high_price
    destination.low_price := source.low_price
    destination.open_price := source.open_price
    destination.close_price := source.close_price
    destination.timeframe := source.timeframe
    destination.bar_index_in_own_timeframe := source.bar_index_in_own_timeframe
    destination.is_finished := source.is_finished


    // Ensure debug_info is allocated if not already
    if na(destination.debug_info)
        destination.debug_info := TimeFrameCandleDebugInfo.new()

    helper_MultiTimeFrameLibrary_copyTimeFrameCandleDebugInfo(source.debug_info, destination.debug_info)

type MultiTimeFrameLibraryDebuggingInfo
    bool debugger_enabled = true 
    array<bool> should_print_timeframe = na
    array<bool> should_print_timeframe_label = na
    ChartDrawingArgs chart_drawing_library_args = na 
    float candle_transparency_level = 75 //0 to 100
    bool draw_all_candles = false 
    bool all_candles_have_labels = false
create_MuliTimeFrameLibraryDebuggingInfo() =>
    MultiTimeFrameLibraryDebuggingInfo debugger = MultiTimeFrameLibraryDebuggingInfo.new() 
    debugger.should_print_timeframe := array.new<bool>()
    debugger.should_print_timeframe_label := array.new<bool>()
    debugger.chart_drawing_library_args := ChartDrawingLibrary_createChartDrawingArgs()
    debugger
    
type MultiTimeFrameLibraryOutput 
    bool something_has_changed = false 
    array<bool> timeframe_candle_has_changed = na
    array<TimeFrameCandle> current_candles = na
create_MultiTimeFrameLibraryOutput() =>
    MultiTimeFrameLibraryOutput output = MultiTimeFrameLibraryOutput.new()
    output.timeframe_candle_has_changed := array.new<bool>() 
    output.current_candles := array.new<TimeFrameCandle>()
    output
type MultiTimeFrameLibraryArgs
    array<int> time_frames = na 
    int lowest_time_frame = 1 
    array<int> remaining_time_until_update = na
    array<int> last_timeframe_bar_index = na 
    MultiTimeFrameLibraryDebuggingInfo debugger = na
    MultiTimeFrameLibraryOutput output = na
    int script_timeframe = 1 //in minutes, default is 1 minute
create_MultiTimeFrameLibraryArgs() =>
    MultiTimeFrameLibraryArgs args = MultiTimeFrameLibraryArgs.new()
    args.time_frames := array.new<int>()
    args.remaining_time_until_update := array.new<int>()
    args.last_timeframe_bar_index := array.new<int>()
    args.debugger := create_MuliTimeFrameLibraryDebuggingInfo()
    args.output := create_MultiTimeFrameLibraryOutput()
    //get the scripts timeframe 
    args.script_timeframe := MiscLibrary_scriptTimeframeInMinutes()
    args 


//returns -1 it not in array
helper_getTimeFrameIndex(MultiTimeFrameLibraryArgs args, int timeframe)=>
    int result = -1
    if args.time_frames.size() > 0 
        for i = args.time_frames.size() -1 to 0
            int current_time_frame = args.time_frames.get(i)
            if current_time_frame == timeframe
                result := i 
                break 
    result 

MultiTimeFrameLibraryDebugger_toggleDrawHigherTimeFrameCandles(MultiTimeFrameLibraryArgs args, int timeframe, bool value, bool value_label = false) =>
    int time_frame_index = helper_getTimeFrameIndex(args, timeframe)
    args.debugger.should_print_timeframe.set(time_frame_index, value)
    args.debugger.should_print_timeframe_label.set(time_frame_index, value_label)


MultiTimeFrameLibrary_keepTrackofTimeFrame(MultiTimeFrameLibraryArgs args, int minutes) =>
    //make sure it doesnt already exist 
    if helper_getTimeFrameIndex(args, minutes) < 0
        args.time_frames.push(minutes)
        args.remaining_time_until_update.push(-1) //mark uninitialized 
        args.last_timeframe_bar_index.push(-1)
        args.output.current_candles.push(na)
        args.output.timeframe_candle_has_changed.push(false)
        
        //optional debugging / drawing 
        if args.debugger.debugger_enabled
            args.debugger.should_print_timeframe.push(false)
            args.debugger.should_print_timeframe_label.push(false)




MultiTimeFrameLibrary_getTimeframeCandle(MultiTimeFrameLibraryArgs args, int minutes) =>
    TimeFrameCandle candle = TimeFrameCandle.new()

    // Convert to TradingView-compatible timeframe string
    string tf_str = str.tostring(minutes)

    // Retrieve HTF data and bar confirmation status
    [o, h, l, c, barIndex, isConfirmed] = request.security(syminfo.tickerid, tf_str, [open, high, low, close, bar_index, barstate.isconfirmed])

    // Fill the candle struct
    candle.high_price := h
    candle.low_price := l
    candle.open_price := o 
    candle.close_price := c 
    candle.timeframe := minutes
    candle.bar_index_in_own_timeframe := barIndex  // This is LTF bar_index; it will be shared across multiple 1m bars
    candle.is_finished := isConfirmed

    if args.debugger.debugger_enabled
        candle.debug_info := TimeFrameCandleDebugInfo.new()
    candle

helper_MultiTimeFrameLibrary_createBoxFromCandle(MultiTimeFrameLibraryArgs args, TimeFrameCandle candle, bool candle_body) =>

    int candle_timeframe = candle.timeframe 
    int candle_timeframe_index = helper_getTimeFrameIndex(args, candle_timeframe)
    TimeFrameCandleDebugInfo candle_debug_info = candle.debug_info

    ChartDrawingBox chart_box = na 
    if candle_body
        bool is_green = candle.close_price >= candle.open_price 
        color candle_base_color = is_green ? color.green : color.red 
        color candle_color = color.new(candle_base_color, args.debugger.candle_transparency_level)
        float top_price = math.max(candle.open_price, candle.close_price)
        float bottom_price = math.min(candle.open_price, candle.close_price)
        chart_box := ChartDrawingLibrary_createChartDrawingBox(args = args.debugger.chart_drawing_library_args , top_price = top_price, bottom_price = bottom_price, left_bar_index = candle_debug_info.first_bar_index, right_bar_index = candle_debug_info.last_bar_index, bg_color = candle_color , border_color = candle_color)
    else
        bool is_green = candle.close_price >= candle.open_price 
        color candle_base_color = is_green ? color.green : color.red 
        color candle_color = color.new(candle_base_color, 0)
        float top_price = candle.high_price
        float bottom_price = candle.low_price
        chart_box := ChartDrawingLibrary_createChartDrawingBox(args = args.debugger.chart_drawing_library_args , top_price = top_price, bottom_price = bottom_price, left_bar_index = candle_debug_info.first_bar_index, right_bar_index = candle_debug_info.last_bar_index, bg_color = color.new(color.red, 100) , border_color = candle_color)

    
    chart_box 

            

            
MultiTimeFrameLibraryDebugger_drawCandle(MultiTimeFrameLibraryArgs args, TimeFrameCandle current_candle) => 
    int timeframe = current_candle.timeframe 
    ChartDrawingBox chart_box = helper_MultiTimeFrameLibrary_createBoxFromCandle(args, current_candle, true )
    ChartDrawingBox outline_box = helper_MultiTimeFrameLibrary_createBoxFromCandle(args, current_candle, false)

    string chart_drawing_group_name = "MultiTimeFrame_" + str.tostring(timeframe)
    string chart_drawing_item_name = str.tostring(current_candle.bar_index_in_own_timeframe)
    string chart_drawing_outline_item_name = str.tostring(current_candle.bar_index_in_own_timeframe) + "_outline"
    ChartDrawingLibrary_UpdateDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_drawing_item_name, chart_box = chart_box)
    ChartDrawingLibrary_UpdateDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_drawing_outline_item_name, chart_box = outline_box)
    ChartDrawingLibrary_FinishDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_drawing_item_name)
    ChartDrawingLibrary_FinishDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_drawing_outline_item_name)
    if current_candle.debug_info.candle_should_have_label 
        label_text = current_candle.debug_info.label_text
        ChartDrawingLabel my_label = ChartDrawingLibrary_createChartDrawingLabel(args = args.debugger.chart_drawing_library_args, label_text = label_text, bar_index_x = current_candle.debug_info.first_bar_index, price_y = current_candle.high_price, label_color = color.white)
        string chart_label_item_name = str.tostring(current_candle.bar_index_in_own_timeframe) + "_label"
        ChartDrawingLibrary_UpdateDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_label_item_name, chart_label = my_label)
        ChartDrawingLibrary_FinishDrawing(args = args.debugger.chart_drawing_library_args, group_name = chart_drawing_group_name, item_name = chart_label_item_name)


MultiTimeFrameLibrary_update(MultiTimeFrameLibraryArgs args) =>
    args.output.something_has_changed := false 
    if args.remaining_time_until_update.size() > 0 
        for i = args.remaining_time_until_update.size() - 1 to 0 
            //check if we have a new candle index 
            int timeframe = args.time_frames.get(i)
            string tf_str = str.tostring(timeframe)
            [timeframe_bar_index] = request.security(syminfo.tickerid, tf_str, [bar_index])
            int prev_bar_index = args.last_timeframe_bar_index.get(i)

            args.output.timeframe_candle_has_changed.set(i, false) // reset flag
            if timeframe_bar_index > prev_bar_index
                args.output.something_has_changed := true
                args.output.timeframe_candle_has_changed.set(i, true)
                //update previous bar index 
                args.last_timeframe_bar_index.set(i, timeframe_bar_index)
                //reset the count 
                args.remaining_time_until_update.set(i, timeframe)
                TimeFrameCandle new_candle = MultiTimeFrameLibrary_getTimeframeCandle(args, timeframe)
                

                //optionally draw the new candle
                if args.debugger.debugger_enabled 
                    TimeFrameCandle current_candle = args.output.current_candles.get(i)
                    int candle_start_point = bar_index
                    if not na(current_candle)
                        candle_start_point := current_candle.debug_info.last_bar_index
                    new_candle.debug_info.last_bar_index := bar_index 
                    new_candle.debug_info.first_bar_index := candle_start_point + 1
                    if (args.debugger.draw_all_candles == true) or (args.debugger.should_print_timeframe.get(i))
                        new_candle.debug_info.should_draw_candle := true
                        new_candle.debug_info.candle_should_have_label := args.debugger.should_print_timeframe_label.get(i)
                        MultiTimeFrameLibraryDebugger_drawCandle(args, new_candle)

                args.output.current_candles.set(i, new_candle)






MultiTimeFrameLibrary_isHigherTimeFrameCandleFinished(MultiTimeFrameLibraryArgs args, int minutes) =>
    int timeframe_index = helper_getTimeFrameIndex(args, minutes)
    args.remaining_time_until_update.get(timeframe_index) == 0


//a function to create a candle object from the current bar
MultiTimeFrameLibrary_createCurrentCandle(MultiTimeFrameLibraryArgs args, int script_tf_in_minutes) =>
    TimeFrameCandle candle = TimeFrameCandle.new()
    candle.high_price := high
    candle.low_price := low
    candle.open_price := open
    candle.close_price := close
    candle.timeframe := script_tf_in_minutes
    candle.bar_index_in_own_timeframe := bar_index
    candle.is_finished := true //assume the current bar is finished

    if args.debugger.debugger_enabled
        candle.debug_info := TimeFrameCandleDebugInfo.new()
        candle.debug_info.first_bar_index := bar_index
        candle.debug_info.last_bar_index := bar_index

    candle
                
                